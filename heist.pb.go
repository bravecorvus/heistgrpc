// Code generated by protoc-gen-go. DO NOT EDIT.
// source: heist.proto

/*
Package heist is a generated protocol buffer package.

It is generated from these files:
	heist.proto

It has these top-level messages:
	PageScrapeRequest
	PageScrapeReply
	ElementScrapeRequest
	ElementScrapeReply
	ElementPostRequest
	ElementPostReply
	AlgorithmsRequest
	AlgorithmsReply
	FrontEndPostPagesRequest
	FrontEndPostPagesReply
	FrontEndGetPagesReply
	FrontEndPostElementRequest
	FrontEndPostElementReply
	FrontEndGetElementsReply
	FrontEndGetElementRequest
	FrontEndGetElementReply
*/
package heist

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PageScrapeRequest struct {
	Id         string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Latestpost string `protobuf:"bytes,2,opt,name=latestpost" json:"latestpost,omitempty"`
}

func (m *PageScrapeRequest) Reset()                    { *m = PageScrapeRequest{} }
func (m *PageScrapeRequest) String() string            { return proto.CompactTextString(m) }
func (*PageScrapeRequest) ProtoMessage()               {}
func (*PageScrapeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PageScrapeRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PageScrapeRequest) GetLatestpost() string {
	if m != nil {
		return m.Latestpost
	}
	return ""
}

type PageScrapeReply struct {
	Id       string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Status   bool                       `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	Msg      string                     `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
	Elements []*PageScrapeReply_Element `protobuf:"bytes,4,rep,name=elements" json:"elements,omitempty"`
}

func (m *PageScrapeReply) Reset()                    { *m = PageScrapeReply{} }
func (m *PageScrapeReply) String() string            { return proto.CompactTextString(m) }
func (*PageScrapeReply) ProtoMessage()               {}
func (*PageScrapeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PageScrapeReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PageScrapeReply) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *PageScrapeReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *PageScrapeReply) GetElements() []*PageScrapeReply_Element {
	if m != nil {
		return m.Elements
	}
	return nil
}

type PageScrapeReply_Element struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Like  string `protobuf:"bytes,2,opt,name=like" json:"like,omitempty"`
	Love  string `protobuf:"bytes,3,opt,name=love" json:"love,omitempty"`
	Haha  string `protobuf:"bytes,4,opt,name=haha" json:"haha,omitempty"`
	Angry string `protobuf:"bytes,5,opt,name=angry" json:"angry,omitempty"`
	Sad   string `protobuf:"bytes,6,opt,name=sad" json:"sad,omitempty"`
	Wow   string `protobuf:"bytes,7,opt,name=wow" json:"wow,omitempty"`
}

func (m *PageScrapeReply_Element) Reset()                    { *m = PageScrapeReply_Element{} }
func (m *PageScrapeReply_Element) String() string            { return proto.CompactTextString(m) }
func (*PageScrapeReply_Element) ProtoMessage()               {}
func (*PageScrapeReply_Element) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *PageScrapeReply_Element) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PageScrapeReply_Element) GetLike() string {
	if m != nil {
		return m.Like
	}
	return ""
}

func (m *PageScrapeReply_Element) GetLove() string {
	if m != nil {
		return m.Love
	}
	return ""
}

func (m *PageScrapeReply_Element) GetHaha() string {
	if m != nil {
		return m.Haha
	}
	return ""
}

func (m *PageScrapeReply_Element) GetAngry() string {
	if m != nil {
		return m.Angry
	}
	return ""
}

func (m *PageScrapeReply_Element) GetSad() string {
	if m != nil {
		return m.Sad
	}
	return ""
}

func (m *PageScrapeReply_Element) GetWow() string {
	if m != nil {
		return m.Wow
	}
	return ""
}

type ElementScrapeRequest struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (m *ElementScrapeRequest) Reset()                    { *m = ElementScrapeRequest{} }
func (m *ElementScrapeRequest) String() string            { return proto.CompactTextString(m) }
func (*ElementScrapeRequest) ProtoMessage()               {}
func (*ElementScrapeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ElementScrapeRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ElementScrapeRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type ElementScrapeReply struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Status bool   `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
	Like   string `protobuf:"bytes,4,opt,name=like" json:"like,omitempty"`
	Love   string `protobuf:"bytes,5,opt,name=love" json:"love,omitempty"`
	Haha   string `protobuf:"bytes,6,opt,name=haha" json:"haha,omitempty"`
	Angry  string `protobuf:"bytes,7,opt,name=angry" json:"angry,omitempty"`
	Sad    string `protobuf:"bytes,8,opt,name=sad" json:"sad,omitempty"`
	Wow    string `protobuf:"bytes,9,opt,name=wow" json:"wow,omitempty"`
}

func (m *ElementScrapeReply) Reset()                    { *m = ElementScrapeReply{} }
func (m *ElementScrapeReply) String() string            { return proto.CompactTextString(m) }
func (*ElementScrapeReply) ProtoMessage()               {}
func (*ElementScrapeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ElementScrapeReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ElementScrapeReply) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *ElementScrapeReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ElementScrapeReply) GetLike() string {
	if m != nil {
		return m.Like
	}
	return ""
}

func (m *ElementScrapeReply) GetLove() string {
	if m != nil {
		return m.Love
	}
	return ""
}

func (m *ElementScrapeReply) GetHaha() string {
	if m != nil {
		return m.Haha
	}
	return ""
}

func (m *ElementScrapeReply) GetAngry() string {
	if m != nil {
		return m.Angry
	}
	return ""
}

func (m *ElementScrapeReply) GetSad() string {
	if m != nil {
		return m.Sad
	}
	return ""
}

func (m *ElementScrapeReply) GetWow() string {
	if m != nil {
		return m.Wow
	}
	return ""
}

type ElementPostRequest struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (m *ElementPostRequest) Reset()                    { *m = ElementPostRequest{} }
func (m *ElementPostRequest) String() string            { return proto.CompactTextString(m) }
func (*ElementPostRequest) ProtoMessage()               {}
func (*ElementPostRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ElementPostRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ElementPostRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type ElementPostReply struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Status bool   `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
}

func (m *ElementPostReply) Reset()                    { *m = ElementPostReply{} }
func (m *ElementPostReply) String() string            { return proto.CompactTextString(m) }
func (*ElementPostReply) ProtoMessage()               {}
func (*ElementPostReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ElementPostReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ElementPostReply) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *ElementPostReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type AlgorithmsRequest struct {
	Id       string                       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Elements []*AlgorithmsRequest_Element `protobuf:"bytes,2,rep,name=elements" json:"elements,omitempty"`
}

func (m *AlgorithmsRequest) Reset()                    { *m = AlgorithmsRequest{} }
func (m *AlgorithmsRequest) String() string            { return proto.CompactTextString(m) }
func (*AlgorithmsRequest) ProtoMessage()               {}
func (*AlgorithmsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AlgorithmsRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AlgorithmsRequest) GetElements() []*AlgorithmsRequest_Element {
	if m != nil {
		return m.Elements
	}
	return nil
}

type AlgorithmsRequest_Element struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Like  string `protobuf:"bytes,2,opt,name=like" json:"like,omitempty"`
	Love  string `protobuf:"bytes,3,opt,name=love" json:"love,omitempty"`
	Haha  string `protobuf:"bytes,4,opt,name=haha" json:"haha,omitempty"`
	Angry string `protobuf:"bytes,5,opt,name=angry" json:"angry,omitempty"`
	Sad   string `protobuf:"bytes,6,opt,name=sad" json:"sad,omitempty"`
	Wow   string `protobuf:"bytes,7,opt,name=wow" json:"wow,omitempty"`
}

func (m *AlgorithmsRequest_Element) Reset()                    { *m = AlgorithmsRequest_Element{} }
func (m *AlgorithmsRequest_Element) String() string            { return proto.CompactTextString(m) }
func (*AlgorithmsRequest_Element) ProtoMessage()               {}
func (*AlgorithmsRequest_Element) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

func (m *AlgorithmsRequest_Element) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AlgorithmsRequest_Element) GetLike() string {
	if m != nil {
		return m.Like
	}
	return ""
}

func (m *AlgorithmsRequest_Element) GetLove() string {
	if m != nil {
		return m.Love
	}
	return ""
}

func (m *AlgorithmsRequest_Element) GetHaha() string {
	if m != nil {
		return m.Haha
	}
	return ""
}

func (m *AlgorithmsRequest_Element) GetAngry() string {
	if m != nil {
		return m.Angry
	}
	return ""
}

func (m *AlgorithmsRequest_Element) GetSad() string {
	if m != nil {
		return m.Sad
	}
	return ""
}

func (m *AlgorithmsRequest_Element) GetWow() string {
	if m != nil {
		return m.Wow
	}
	return ""
}

type AlgorithmsReply struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Post   bool   `protobuf:"varint,2,opt,name=post" json:"post,omitempty"`
	Delete bool   `protobuf:"varint,3,opt,name=delete" json:"delete,omitempty"`
}

func (m *AlgorithmsReply) Reset()                    { *m = AlgorithmsReply{} }
func (m *AlgorithmsReply) String() string            { return proto.CompactTextString(m) }
func (*AlgorithmsReply) ProtoMessage()               {}
func (*AlgorithmsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AlgorithmsReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AlgorithmsReply) GetPost() bool {
	if m != nil {
		return m.Post
	}
	return false
}

func (m *AlgorithmsReply) GetDelete() bool {
	if m != nil {
		return m.Delete
	}
	return false
}

type FrontEndPostPagesRequest struct {
	// addordelete- add = true, delete = false
	Addordelete bool `protobuf:"varint,1,opt,name=addordelete" json:"addordelete,omitempty"`
	// idlink will either be a link to the page if the user wants to add it, or an id if they want to delete it.
	Idlink string `protobuf:"bytes,2,opt,name=idlink" json:"idlink,omitempty"`
}

func (m *FrontEndPostPagesRequest) Reset()                    { *m = FrontEndPostPagesRequest{} }
func (m *FrontEndPostPagesRequest) String() string            { return proto.CompactTextString(m) }
func (*FrontEndPostPagesRequest) ProtoMessage()               {}
func (*FrontEndPostPagesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *FrontEndPostPagesRequest) GetAddordelete() bool {
	if m != nil {
		return m.Addordelete
	}
	return false
}

func (m *FrontEndPostPagesRequest) GetIdlink() string {
	if m != nil {
		return m.Idlink
	}
	return ""
}

type FrontEndPostPagesReply struct {
	Status bool   `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *FrontEndPostPagesReply) Reset()                    { *m = FrontEndPostPagesReply{} }
func (m *FrontEndPostPagesReply) String() string            { return proto.CompactTextString(m) }
func (*FrontEndPostPagesReply) ProtoMessage()               {}
func (*FrontEndPostPagesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *FrontEndPostPagesReply) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *FrontEndPostPagesReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type FrontEndGetPagesReply struct {
	Status bool                          `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Msg    string                        `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Pages  []*FrontEndGetPagesReply_Page `protobuf:"bytes,3,rep,name=pages" json:"pages,omitempty"`
}

func (m *FrontEndGetPagesReply) Reset()                    { *m = FrontEndGetPagesReply{} }
func (m *FrontEndGetPagesReply) String() string            { return proto.CompactTextString(m) }
func (*FrontEndGetPagesReply) ProtoMessage()               {}
func (*FrontEndGetPagesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *FrontEndGetPagesReply) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *FrontEndGetPagesReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *FrontEndGetPagesReply) GetPages() []*FrontEndGetPagesReply_Page {
	if m != nil {
		return m.Pages
	}
	return nil
}

type FrontEndGetPagesReply_Page struct {
	Name       string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id         string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Numheisted int32  `protobuf:"varint,3,opt,name=numheisted" json:"numheisted,omitempty"`
}

func (m *FrontEndGetPagesReply_Page) Reset()                    { *m = FrontEndGetPagesReply_Page{} }
func (m *FrontEndGetPagesReply_Page) String() string            { return proto.CompactTextString(m) }
func (*FrontEndGetPagesReply_Page) ProtoMessage()               {}
func (*FrontEndGetPagesReply_Page) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 0} }

func (m *FrontEndGetPagesReply_Page) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FrontEndGetPagesReply_Page) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FrontEndGetPagesReply_Page) GetNumheisted() int32 {
	if m != nil {
		return m.Numheisted
	}
	return 0
}

type FrontEndPostElementRequest struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Operation string `protobuf:"bytes,2,opt,name=operation" json:"operation,omitempty"`
}

func (m *FrontEndPostElementRequest) Reset()                    { *m = FrontEndPostElementRequest{} }
func (m *FrontEndPostElementRequest) String() string            { return proto.CompactTextString(m) }
func (*FrontEndPostElementRequest) ProtoMessage()               {}
func (*FrontEndPostElementRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *FrontEndPostElementRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FrontEndPostElementRequest) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

type FrontEndPostElementReply struct {
	Status bool   `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *FrontEndPostElementReply) Reset()                    { *m = FrontEndPostElementReply{} }
func (m *FrontEndPostElementReply) String() string            { return proto.CompactTextString(m) }
func (*FrontEndPostElementReply) ProtoMessage()               {}
func (*FrontEndPostElementReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *FrontEndPostElementReply) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *FrontEndPostElementReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type FrontEndGetElementsReply struct {
	Status   bool                                `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Msg      string                              `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Elements []*FrontEndGetElementsReply_Element `protobuf:"bytes,3,rep,name=elements" json:"elements,omitempty"`
}

func (m *FrontEndGetElementsReply) Reset()                    { *m = FrontEndGetElementsReply{} }
func (m *FrontEndGetElementsReply) String() string            { return proto.CompactTextString(m) }
func (*FrontEndGetElementsReply) ProtoMessage()               {}
func (*FrontEndGetElementsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *FrontEndGetElementsReply) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *FrontEndGetElementsReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *FrontEndGetElementsReply) GetElements() []*FrontEndGetElementsReply_Element {
	if m != nil {
		return m.Elements
	}
	return nil
}

type FrontEndGetElementsReply_Element struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Like  string `protobuf:"bytes,2,opt,name=like" json:"like,omitempty"`
	Love  string `protobuf:"bytes,3,opt,name=love" json:"love,omitempty"`
	Haha  string `protobuf:"bytes,4,opt,name=haha" json:"haha,omitempty"`
	Angry string `protobuf:"bytes,5,opt,name=angry" json:"angry,omitempty"`
	Sad   string `protobuf:"bytes,6,opt,name=sad" json:"sad,omitempty"`
	Wow   string `protobuf:"bytes,7,opt,name=wow" json:"wow,omitempty"`
}

func (m *FrontEndGetElementsReply_Element) Reset()         { *m = FrontEndGetElementsReply_Element{} }
func (m *FrontEndGetElementsReply_Element) String() string { return proto.CompactTextString(m) }
func (*FrontEndGetElementsReply_Element) ProtoMessage()    {}
func (*FrontEndGetElementsReply_Element) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{13, 0}
}

func (m *FrontEndGetElementsReply_Element) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FrontEndGetElementsReply_Element) GetLike() string {
	if m != nil {
		return m.Like
	}
	return ""
}

func (m *FrontEndGetElementsReply_Element) GetLove() string {
	if m != nil {
		return m.Love
	}
	return ""
}

func (m *FrontEndGetElementsReply_Element) GetHaha() string {
	if m != nil {
		return m.Haha
	}
	return ""
}

func (m *FrontEndGetElementsReply_Element) GetAngry() string {
	if m != nil {
		return m.Angry
	}
	return ""
}

func (m *FrontEndGetElementsReply_Element) GetSad() string {
	if m != nil {
		return m.Sad
	}
	return ""
}

func (m *FrontEndGetElementsReply_Element) GetWow() string {
	if m != nil {
		return m.Wow
	}
	return ""
}

type FrontEndGetElementRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *FrontEndGetElementRequest) Reset()                    { *m = FrontEndGetElementRequest{} }
func (m *FrontEndGetElementRequest) String() string            { return proto.CompactTextString(m) }
func (*FrontEndGetElementRequest) ProtoMessage()               {}
func (*FrontEndGetElementRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *FrontEndGetElementRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type FrontEndGetElementReply struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Status bool   `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
	Like   string `protobuf:"bytes,4,opt,name=like" json:"like,omitempty"`
	Love   string `protobuf:"bytes,5,opt,name=love" json:"love,omitempty"`
	Haha   string `protobuf:"bytes,6,opt,name=haha" json:"haha,omitempty"`
	Angry  string `protobuf:"bytes,7,opt,name=angry" json:"angry,omitempty"`
	Sad    string `protobuf:"bytes,8,opt,name=sad" json:"sad,omitempty"`
	Wow    string `protobuf:"bytes,9,opt,name=wow" json:"wow,omitempty"`
}

func (m *FrontEndGetElementReply) Reset()                    { *m = FrontEndGetElementReply{} }
func (m *FrontEndGetElementReply) String() string            { return proto.CompactTextString(m) }
func (*FrontEndGetElementReply) ProtoMessage()               {}
func (*FrontEndGetElementReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *FrontEndGetElementReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FrontEndGetElementReply) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *FrontEndGetElementReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *FrontEndGetElementReply) GetLike() string {
	if m != nil {
		return m.Like
	}
	return ""
}

func (m *FrontEndGetElementReply) GetLove() string {
	if m != nil {
		return m.Love
	}
	return ""
}

func (m *FrontEndGetElementReply) GetHaha() string {
	if m != nil {
		return m.Haha
	}
	return ""
}

func (m *FrontEndGetElementReply) GetAngry() string {
	if m != nil {
		return m.Angry
	}
	return ""
}

func (m *FrontEndGetElementReply) GetSad() string {
	if m != nil {
		return m.Sad
	}
	return ""
}

func (m *FrontEndGetElementReply) GetWow() string {
	if m != nil {
		return m.Wow
	}
	return ""
}

func init() {
	proto.RegisterType((*PageScrapeRequest)(nil), "heist.PageScrapeRequest")
	proto.RegisterType((*PageScrapeReply)(nil), "heist.PageScrapeReply")
	proto.RegisterType((*PageScrapeReply_Element)(nil), "heist.PageScrapeReply.Element")
	proto.RegisterType((*ElementScrapeRequest)(nil), "heist.ElementScrapeRequest")
	proto.RegisterType((*ElementScrapeReply)(nil), "heist.ElementScrapeReply")
	proto.RegisterType((*ElementPostRequest)(nil), "heist.ElementPostRequest")
	proto.RegisterType((*ElementPostReply)(nil), "heist.ElementPostReply")
	proto.RegisterType((*AlgorithmsRequest)(nil), "heist.AlgorithmsRequest")
	proto.RegisterType((*AlgorithmsRequest_Element)(nil), "heist.AlgorithmsRequest.Element")
	proto.RegisterType((*AlgorithmsReply)(nil), "heist.AlgorithmsReply")
	proto.RegisterType((*FrontEndPostPagesRequest)(nil), "heist.FrontEndPostPagesRequest")
	proto.RegisterType((*FrontEndPostPagesReply)(nil), "heist.FrontEndPostPagesReply")
	proto.RegisterType((*FrontEndGetPagesReply)(nil), "heist.FrontEndGetPagesReply")
	proto.RegisterType((*FrontEndGetPagesReply_Page)(nil), "heist.FrontEndGetPagesReply.Page")
	proto.RegisterType((*FrontEndPostElementRequest)(nil), "heist.FrontEndPostElementRequest")
	proto.RegisterType((*FrontEndPostElementReply)(nil), "heist.FrontEndPostElementReply")
	proto.RegisterType((*FrontEndGetElementsReply)(nil), "heist.FrontEndGetElementsReply")
	proto.RegisterType((*FrontEndGetElementsReply_Element)(nil), "heist.FrontEndGetElementsReply.Element")
	proto.RegisterType((*FrontEndGetElementRequest)(nil), "heist.FrontEndGetElementRequest")
	proto.RegisterType((*FrontEndGetElementReply)(nil), "heist.FrontEndGetElementReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Heist service

type HeistClient interface {
	ScrapePage(ctx context.Context, in *PageScrapeRequest, opts ...grpc.CallOption) (*PageScrapeReply, error)
	ScrapeElement(ctx context.Context, in *ElementScrapeRequest, opts ...grpc.CallOption) (*ElementScrapeReply, error)
	PostElement(ctx context.Context, in *ElementPostRequest, opts ...grpc.CallOption) (*ElementPostReply, error)
	RunElementAlgorithms(ctx context.Context, in *AlgorithmsRequest, opts ...grpc.CallOption) (*AlgorithmsReply, error)
	FrontEndPostPages(ctx context.Context, in *FrontEndPostPagesRequest, opts ...grpc.CallOption) (*FrontEndPostPagesReply, error)
	FrontEndGetPages(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*FrontEndGetPagesReply, error)
	FrontEndPostElement(ctx context.Context, in *FrontEndPostElementRequest, opts ...grpc.CallOption) (*FrontEndPostElementReply, error)
	FrontEndGetElements(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*FrontEndGetElementsReply, error)
	FrontEndGetElement(ctx context.Context, in *FrontEndGetElementRequest, opts ...grpc.CallOption) (*FrontEndGetElementReply, error)
}

type heistClient struct {
	cc *grpc.ClientConn
}

func NewHeistClient(cc *grpc.ClientConn) HeistClient {
	return &heistClient{cc}
}

func (c *heistClient) ScrapePage(ctx context.Context, in *PageScrapeRequest, opts ...grpc.CallOption) (*PageScrapeReply, error) {
	out := new(PageScrapeReply)
	err := grpc.Invoke(ctx, "/heist.Heist/ScrapePage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heistClient) ScrapeElement(ctx context.Context, in *ElementScrapeRequest, opts ...grpc.CallOption) (*ElementScrapeReply, error) {
	out := new(ElementScrapeReply)
	err := grpc.Invoke(ctx, "/heist.Heist/ScrapeElement", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heistClient) PostElement(ctx context.Context, in *ElementPostRequest, opts ...grpc.CallOption) (*ElementPostReply, error) {
	out := new(ElementPostReply)
	err := grpc.Invoke(ctx, "/heist.Heist/PostElement", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heistClient) RunElementAlgorithms(ctx context.Context, in *AlgorithmsRequest, opts ...grpc.CallOption) (*AlgorithmsReply, error) {
	out := new(AlgorithmsReply)
	err := grpc.Invoke(ctx, "/heist.Heist/RunElementAlgorithms", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heistClient) FrontEndPostPages(ctx context.Context, in *FrontEndPostPagesRequest, opts ...grpc.CallOption) (*FrontEndPostPagesReply, error) {
	out := new(FrontEndPostPagesReply)
	err := grpc.Invoke(ctx, "/heist.Heist/FrontEndPostPages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heistClient) FrontEndGetPages(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*FrontEndGetPagesReply, error) {
	out := new(FrontEndGetPagesReply)
	err := grpc.Invoke(ctx, "/heist.Heist/FrontEndGetPages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heistClient) FrontEndPostElement(ctx context.Context, in *FrontEndPostElementRequest, opts ...grpc.CallOption) (*FrontEndPostElementReply, error) {
	out := new(FrontEndPostElementReply)
	err := grpc.Invoke(ctx, "/heist.Heist/FrontEndPostElement", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heistClient) FrontEndGetElements(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*FrontEndGetElementsReply, error) {
	out := new(FrontEndGetElementsReply)
	err := grpc.Invoke(ctx, "/heist.Heist/FrontEndGetElements", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heistClient) FrontEndGetElement(ctx context.Context, in *FrontEndGetElementRequest, opts ...grpc.CallOption) (*FrontEndGetElementReply, error) {
	out := new(FrontEndGetElementReply)
	err := grpc.Invoke(ctx, "/heist.Heist/FrontEndGetElement", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Heist service

type HeistServer interface {
	ScrapePage(context.Context, *PageScrapeRequest) (*PageScrapeReply, error)
	ScrapeElement(context.Context, *ElementScrapeRequest) (*ElementScrapeReply, error)
	PostElement(context.Context, *ElementPostRequest) (*ElementPostReply, error)
	RunElementAlgorithms(context.Context, *AlgorithmsRequest) (*AlgorithmsReply, error)
	FrontEndPostPages(context.Context, *FrontEndPostPagesRequest) (*FrontEndPostPagesReply, error)
	FrontEndGetPages(context.Context, *google_protobuf.Empty) (*FrontEndGetPagesReply, error)
	FrontEndPostElement(context.Context, *FrontEndPostElementRequest) (*FrontEndPostElementReply, error)
	FrontEndGetElements(context.Context, *google_protobuf.Empty) (*FrontEndGetElementsReply, error)
	FrontEndGetElement(context.Context, *FrontEndGetElementRequest) (*FrontEndGetElementReply, error)
}

func RegisterHeistServer(s *grpc.Server, srv HeistServer) {
	s.RegisterService(&_Heist_serviceDesc, srv)
}

func _Heist_ScrapePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageScrapeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeistServer).ScrapePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heist.Heist/ScrapePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeistServer).ScrapePage(ctx, req.(*PageScrapeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Heist_ScrapeElement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElementScrapeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeistServer).ScrapeElement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heist.Heist/ScrapeElement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeistServer).ScrapeElement(ctx, req.(*ElementScrapeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Heist_PostElement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElementPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeistServer).PostElement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heist.Heist/PostElement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeistServer).PostElement(ctx, req.(*ElementPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Heist_RunElementAlgorithms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlgorithmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeistServer).RunElementAlgorithms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heist.Heist/RunElementAlgorithms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeistServer).RunElementAlgorithms(ctx, req.(*AlgorithmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Heist_FrontEndPostPages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrontEndPostPagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeistServer).FrontEndPostPages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heist.Heist/FrontEndPostPages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeistServer).FrontEndPostPages(ctx, req.(*FrontEndPostPagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Heist_FrontEndGetPages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeistServer).FrontEndGetPages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heist.Heist/FrontEndGetPages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeistServer).FrontEndGetPages(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Heist_FrontEndPostElement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrontEndPostElementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeistServer).FrontEndPostElement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heist.Heist/FrontEndPostElement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeistServer).FrontEndPostElement(ctx, req.(*FrontEndPostElementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Heist_FrontEndGetElements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeistServer).FrontEndGetElements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heist.Heist/FrontEndGetElements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeistServer).FrontEndGetElements(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Heist_FrontEndGetElement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrontEndGetElementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeistServer).FrontEndGetElement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heist.Heist/FrontEndGetElement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeistServer).FrontEndGetElement(ctx, req.(*FrontEndGetElementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Heist_serviceDesc = grpc.ServiceDesc{
	ServiceName: "heist.Heist",
	HandlerType: (*HeistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScrapePage",
			Handler:    _Heist_ScrapePage_Handler,
		},
		{
			MethodName: "ScrapeElement",
			Handler:    _Heist_ScrapeElement_Handler,
		},
		{
			MethodName: "PostElement",
			Handler:    _Heist_PostElement_Handler,
		},
		{
			MethodName: "RunElementAlgorithms",
			Handler:    _Heist_RunElementAlgorithms_Handler,
		},
		{
			MethodName: "FrontEndPostPages",
			Handler:    _Heist_FrontEndPostPages_Handler,
		},
		{
			MethodName: "FrontEndGetPages",
			Handler:    _Heist_FrontEndGetPages_Handler,
		},
		{
			MethodName: "FrontEndPostElement",
			Handler:    _Heist_FrontEndPostElement_Handler,
		},
		{
			MethodName: "FrontEndGetElements",
			Handler:    _Heist_FrontEndGetElements_Handler,
		},
		{
			MethodName: "FrontEndGetElement",
			Handler:    _Heist_FrontEndGetElement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heist.proto",
}

func init() { proto.RegisterFile("heist.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 761 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0x8e, 0x9d, 0x38, 0x4d, 0x27, 0x7a, 0xdf, 0xb6, 0xfb, 0xf6, 0x4d, 0x5d, 0xb7, 0xb4, 0xe9,
	0x5e, 0xa8, 0x84, 0x94, 0x4a, 0xe5, 0x00, 0xaa, 0x38, 0x00, 0xa5, 0x14, 0x2a, 0x90, 0x2a, 0x03,
	0x12, 0x12, 0x27, 0x17, 0x2f, 0x89, 0x55, 0xc7, 0x6b, 0xe2, 0x0d, 0x51, 0x7e, 0x05, 0x67, 0xc4,
	0xdf, 0x41, 0x48, 0x1c, 0xf9, 0x2d, 0xfc, 0x01, 0xb4, 0x1f, 0xfe, 0x88, 0xbd, 0x09, 0x2a, 0x3d,
	0xf5, 0x36, 0x3b, 0x3b, 0xf3, 0xf8, 0xd9, 0x67, 0x66, 0x67, 0x0d, 0xed, 0x01, 0x09, 0x12, 0xd6,
	0x8b, 0x47, 0x94, 0x51, 0x64, 0x89, 0x85, 0xb3, 0xd5, 0xa7, 0xb4, 0x1f, 0x92, 0x03, 0xe1, 0xbc,
	0x18, 0x7f, 0x38, 0x20, 0xc3, 0x98, 0x4d, 0x65, 0x0c, 0x3e, 0x86, 0xb5, 0x73, 0xaf, 0x4f, 0x5e,
	0xbd, 0x1f, 0x79, 0x31, 0x71, 0xc9, 0xc7, 0x31, 0x49, 0x18, 0xfa, 0x17, 0xcc, 0xc0, 0xb7, 0x8d,
	0xae, 0xb1, 0xbf, 0xec, 0x9a, 0x81, 0x8f, 0x76, 0x00, 0x42, 0x8f, 0x91, 0x84, 0xc5, 0x34, 0x61,
	0xb6, 0x29, 0xfc, 0x05, 0x0f, 0xfe, 0x62, 0xc2, 0x4a, 0x11, 0x25, 0x0e, 0xa7, 0x15, 0x8c, 0x0e,
	0x34, 0x13, 0xe6, 0xb1, 0x71, 0x22, 0xf2, 0x5b, 0xae, 0x5a, 0xa1, 0x55, 0xa8, 0x0f, 0x93, 0xbe,
	0x5d, 0x17, 0x81, 0xdc, 0x44, 0x47, 0xd0, 0x22, 0x21, 0x19, 0x92, 0x88, 0x25, 0x76, 0xa3, 0x5b,
	0xdf, 0x6f, 0x1f, 0xee, 0xf4, 0xe4, 0xb1, 0x4a, 0xdf, 0xe8, 0x9d, 0xc8, 0x30, 0x37, 0x8b, 0x77,
	0x3e, 0x1b, 0xb0, 0xa4, 0xbc, 0x15, 0x06, 0x08, 0x1a, 0x61, 0x70, 0x49, 0x14, 0x7f, 0x61, 0x0b,
	0x1f, 0xfd, 0x44, 0xd4, 0xe7, 0x85, 0xcd, 0x7d, 0x03, 0x6f, 0xe0, 0xd9, 0x0d, 0xe9, 0xe3, 0x36,
	0x5a, 0x07, 0xcb, 0x8b, 0xfa, 0xa3, 0xa9, 0x6d, 0x09, 0xa7, 0x5c, 0x70, 0xee, 0x89, 0xe7, 0xdb,
	0x4d, 0xc9, 0x3d, 0xf1, 0x7c, 0xee, 0x99, 0xd0, 0x89, 0xbd, 0x24, 0x3d, 0x13, 0x3a, 0xc1, 0x47,
	0xb0, 0xae, 0x08, 0x2d, 0xd6, 0x18, 0x41, 0x83, 0x4d, 0xe3, 0x8c, 0x1d, 0xb7, 0xf1, 0x37, 0x03,
	0x50, 0x29, 0xf9, 0x7a, 0xd2, 0xa6, 0x12, 0x34, 0x34, 0x12, 0x58, 0x1a, 0x09, 0x9a, 0x3a, 0x09,
	0x96, 0x34, 0x12, 0xb4, 0x2a, 0x12, 0x2c, 0xe7, 0x12, 0xdc, 0xcf, 0x4e, 0x71, 0x4e, 0x13, 0x76,
	0x15, 0x01, 0x5e, 0xc0, 0xea, 0x4c, 0xe6, 0xb5, 0x4e, 0x8f, 0x7f, 0x19, 0xb0, 0xf6, 0x28, 0xec,
	0xd3, 0x51, 0xc0, 0x06, 0xc3, 0x64, 0x1e, 0x8f, 0x07, 0x85, 0xf6, 0x33, 0x45, 0xfb, 0x75, 0x55,
	0xfb, 0x55, 0x72, 0x6f, 0x44, 0x03, 0xbe, 0x84, 0x95, 0x22, 0x71, 0x9d, 0x84, 0x08, 0x1a, 0xd9,
	0xcd, 0x6e, 0xb9, 0xc2, 0xe6, 0xb2, 0xfa, 0x24, 0x24, 0x4c, 0x52, 0x6b, 0xb9, 0x6a, 0x85, 0x5f,
	0x83, 0xfd, 0x74, 0x44, 0x23, 0x76, 0x12, 0xf9, 0xbc, 0x26, 0xfc, 0x4a, 0x66, 0x52, 0x76, 0xa1,
	0xed, 0xf9, 0x3e, 0x1d, 0xa9, 0x44, 0x43, 0x24, 0x16, 0x5d, 0x1c, 0x35, 0xf0, 0xc3, 0x20, 0xba,
	0x54, 0x22, 0xa8, 0x15, 0x7e, 0x0c, 0x1d, 0x0d, 0x2a, 0xe7, 0x9a, 0x97, 0xd7, 0xd0, 0x95, 0xd7,
	0xcc, 0xcb, 0xfb, 0xdd, 0x80, 0xff, 0x53, 0x90, 0x53, 0xf2, 0x57, 0x18, 0xe8, 0x1e, 0x58, 0x31,
	0xcf, 0xb3, 0xeb, 0xa2, 0xf2, 0x7b, 0xaa, 0xf2, 0x5a, 0x58, 0x31, 0x8e, 0x5c, 0x19, 0xef, 0x9c,
	0x41, 0x83, 0x2f, 0xb9, 0x94, 0x91, 0x37, 0x24, 0x4a, 0x5c, 0x61, 0x2b, 0xb9, 0xcd, 0xe2, 0x38,
	0x8d, 0xc6, 0x43, 0x81, 0x4c, 0x7c, 0x21, 0xaf, 0xe5, 0x16, 0x3c, 0xf8, 0x0c, 0x9c, 0xa2, 0x18,
	0x69, 0x93, 0xcd, 0xe9, 0xd7, 0x6d, 0x58, 0xa6, 0x31, 0x19, 0x79, 0x2c, 0xa0, 0x91, 0xfa, 0x48,
	0xee, 0xc0, 0x4f, 0x66, 0xcb, 0x95, 0x61, 0x5d, 0x4d, 0xda, 0xaf, 0x66, 0x0e, 0x73, 0x4a, 0x52,
	0x94, 0x2b, 0xab, 0x7b, 0x5c, 0xb8, 0x5a, 0x52, 0xe0, 0xdb, 0x55, 0x81, 0x67, 0xc0, 0x6f, 0xc4,
	0x0d, 0xbb, 0x03, 0x9b, 0x55, 0xfe, 0x73, 0xca, 0x85, 0x7f, 0x18, 0xb0, 0xa1, 0x8b, 0xbe, 0x81,
	0x83, 0xfd, 0xf0, 0xa7, 0x05, 0xd6, 0x33, 0x5e, 0x3f, 0xf4, 0x10, 0x40, 0xbe, 0x50, 0xe2, 0x12,
	0xd8, 0x9a, 0xf7, 0x5a, 0xa8, 0xe1, 0x74, 0xf4, 0x2f, 0x39, 0xae, 0xa1, 0xe7, 0xf0, 0x8f, 0x74,
	0xa4, 0xb5, 0xdd, 0x52, 0xa1, 0xba, 0xd7, 0xd3, 0xd9, 0xd4, 0x6f, 0x4a, 0xa8, 0x63, 0x68, 0x17,
	0x7a, 0x1d, 0x95, 0x62, 0x0b, 0x6f, 0x90, 0xb3, 0xa1, 0xdb, 0x92, 0x20, 0x67, 0xb0, 0xee, 0x8e,
	0x23, 0xb5, 0x91, 0x0f, 0xd0, 0xec, 0x6c, 0x95, 0xc7, 0x20, 0x3b, 0x5b, 0x69, 0xda, 0xe2, 0x1a,
	0x7a, 0x03, 0x6b, 0x95, 0xe9, 0x86, 0x76, 0x4b, 0xad, 0x5f, 0x9e, 0xa6, 0xce, 0xad, 0xf9, 0x01,
	0x29, 0xc5, 0xd5, 0xf2, 0x60, 0x42, 0x9d, 0x9e, 0xfc, 0xdb, 0xeb, 0xa5, 0x7f, 0x7b, 0xbd, 0x13,
	0xfe, 0xb7, 0xe7, 0x6c, 0x2f, 0x9a, 0x64, 0xb8, 0x86, 0xde, 0xc1, 0x7f, 0x9a, 0x39, 0x81, 0xf6,
	0x34, 0x1c, 0x66, 0x1b, 0xdc, 0xd9, 0x5d, 0x14, 0x22, 0xc1, 0xcf, 0x73, 0xf0, 0xc2, 0x05, 0x9f,
	0xcb, 0x75, 0xf7, 0x0f, 0x43, 0x01, 0xd7, 0xd0, 0x5b, 0x40, 0xd5, 0x5d, 0xd4, 0x9d, 0x9b, 0x98,
	0x92, 0xdd, 0x59, 0x10, 0x21, 0x90, 0x2f, 0x9a, 0x82, 0xcc, 0xdd, 0xdf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x14, 0xbe, 0x8a, 0x5c, 0x4a, 0x0b, 0x00, 0x00,
}
